cmake_minimum_required(VERSION 3.28 FATAL_ERROR)
project(modgen)

set(MODGEN_GENERATOR "" CACHE STRING "Path to the modgen executable")

set(MODGEN_STD_INCLUDES
        "algorithm" "any" "array" "atomic" "barrier" "bit" "bitset" "cassert" "ccomplex" "cctype" "cerrno" "cfenv" "cfloat" "charconv" "chrono" "cinttypes"
        "ciso646" "climits" "clocale" "cmath" "codecvt" "compare" "complex" "concepts" "condition_variable" "csetjmp" "csignal" "cstdalign" "cstdarg"
        "cstdbool" "cstddef" "cstdint" "cstdio" "cstdlib" "cstring" "ctgmath" "ctime" "cuchar" "cwchar" "cwctype" "deque" "exception" "execution"
        "expected" "filesystem" "format" "forward_list" "fstream" "functional" "future" "initializer_list" "iomanip" "ios" "iosfwd" "iostream" "istream"
        "iterator" "latch" "limits" "list" "locale" "map" "memory" "memory_resource" "mutex" "new" "numbers" "numeric" "optional" "ostream" "queue" "random"
        "ranges" "ratio" "regex" "scoped_allocator" "semaphore" "set" "shared_mutex" "source_location" "span" "spanstream" "sstream" "stack" "stdatomic.h"
        "stdexcept" "stdfloat" "stop_token" "streambuf" "string" "string_view" "syncstream" "system_error" "thread" "tuple" "typeindex" "typeinfo"
        "type_traits" "unordered_map" "unordered_set" "utility" "valarray" "variant" "vector" "version"
)

# Default values

if (NOT DEFINED MODGEN_BUILD)
    set(MODGEN_BUILD ON)
endif ()

if (NOT DEFINED MODGEN_FIND_LLVM)
    set(MODGEN_FIND_LLVM ON)
endif ()

if (NOT DEFINED MODGEN_FIND_CLANG)
    set(MODGEN_FIND_CLANG ON)
endif ()

if (NOT DEFINED MODGEN_TARGET_NAME)
    set(MODGEN_TARGET_NAME modgen)
endif ()

if (MODGEN_GENERATOR STREQUAL "")
    if (MODGEN_BUILD)
        set(MODGEN_CMD "${MODGEN_TARGET_NAME}")
    else ()
        message(FATAL_ERROR "modgen is not being built and MODGEN_GENERATOR is not set")
    endif ()
else ()
    set(MODGEN_CMD "${MODGEN_GENERATOR}")
    set(MODGEN_BUILD OFF)
endif ()


if (MODGEN_BUILD)
    if (MODGEN_FIND_LLVM)
        find_package(LLVM REQUIRED)
        list(APPEND CMAKE_MODULE_PATH "${LLVM_CMAKE_DIR}")
        include(AddLLVM)
    endif ()

    if (MODGEN_FIND_CLANG)
        find_package(Clang REQUIRED)
        list(APPEND CMAKE_MODULE_PATH "${CLANG_CMAKE_DIR}")
        include(AddClang)
    endif ()

    add_clang_executable(${MODGEN_TARGET_NAME} modgen.cpp)
    target_compile_features(${MODGEN_TARGET_NAME} PRIVATE cxx_std_20)
    target_link_libraries(${MODGEN_TARGET_NAME} PRIVATE clang-cpp)
endif ()


function(modgen_get_compiler_flags)
    cmake_parse_arguments(
            OPT
            ""
            "CXX_STANDARD"
            "INCLUDES"
            ${ARGN}
    )
    set(flags "")
    if (CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "GNU")
        if (UNIX)
            execute_process(COMMAND
                    "/bin/sh" "-c"
                    "LC_ALL=C \"${CMAKE_CXX_COMPILER}\" -E -x c++ -std=c++${OPT_CXX_STANDARD} -v /dev/null 2>&1 | awk 'f&&!/^ /{f=0}; /#include/{f=1}; f&&/^ (.*)\$/{ printf \"-isystem;%s;\",\$1; }'"
                    OUTPUT_VARIABLE flags
                    ERROR_QUIET
            )
        else ()
            message(WARNING "modgen doesn't support non-UNIX systems for now")
        endif ()
        list(APPEND flags "-std=c++${OPT_CXX_STANDARD}")
        foreach (inc ${OPT_INCLUDES})
            list(APPEND flags "-I" "${inc}")
        endforeach ()
    else ()
        message(WARNING "modgen doesn't support non-GNU frontend compilers for now")
    endif ()
    set(MODGEN_COMPILER_FLAGS "${flags}" PARENT_SCOPE)
endfunction()

function(modgen_generate MODULE_NAME)
    cmake_parse_arguments(
            MODULE
            "NO_DEFAULT_CFLAGS;STD_INCLUDES"
            "FILTER;EXCLUDE;CXX_STANDARD"
            "INCLUDE;INCLUDE_DIRS;CFLAGS;SOURCES;LIBRARIES;NAMESPACES"
            ${ARGN}
    )

    set(MODULE_OUTPUT_DIR "${PROJECT_BINARY_DIR}/modgen_generated_modules/${MODULE_NAME}")
    set(MODULE_SOURCE_FILE "${MODULE_OUTPUT_DIR}/${MODULE_NAME}.cppm")
    set(MODULE_INCLUDES_FILE "${MODULE_OUTPUT_DIR}/includes.cpp")

    file(MAKE_DIRECTORY "${MODULE_OUTPUT_DIR}")

    set(MODULE_SOURCE_CONTENTS "// autogenerated\n\n")

    if (MODULE_STD_INCLUDES)
        list(APPEND MODULE_INCLUDE ${MODGEN_STD_INCLUDES})
    endif()

    foreach (include_file ${MODULE_INCLUDE})
        string(APPEND MODULE_SOURCE_CONTENTS "#if __has_include(\"${include_file}\")\n")
        string(APPEND MODULE_SOURCE_CONTENTS "  #include \"${include_file}\"\n")
        string(APPEND MODULE_SOURCE_CONTENTS "#endif // __has_include(\"${include_file}\")\n\n")
    endforeach ()
    file(CONFIGURE OUTPUT "${MODULE_INCLUDES_FILE}" CONTENT "${MODULE_SOURCE_CONTENTS}")

    if (DEFINED MODULE_NAMESPACES)
        if (DEFINED MODULE_FILTER)
            message(WARNING "modgen_generate: both NAMESPACES and FILTER defined, ignoring NAMESPACES")
        else ()
            set(MODULE_FILTER "^::(")
            set(is_first ON)
            foreach (ns ${MODULE_NAMESPACES})
                string(REGEX REPLACE "^(::)+" "" ns "${ns}")
                string(REGEX REPLACE "(::)+$" "" ns "${ns}")
                if (is_first)
                    set(is_first OFF)
                else ()
                    string(APPEND MODULE_FILTER "|")
                endif ()
                string(APPEND MODULE_FILTER "(${ns})")
            endforeach ()
            string(APPEND MODULE_FILTER ")(::.*)?$$")
        endif ()
    endif ()

    if (NOT DEFINED MODULE_EXCLUDE)
        set(MODULE_EXCLUDE "^.*::_[_A-Z].*$$")
    endif ()

    if (NOT DEFINED MODULE_CXX_STANDARD)
        if (DEFINED CMAKE_CXX_STANDARD)
            set(MODULE_CXX_STANDARD "${CMAKE_CXX_STANDARD}")
        else ()
            message(WARNING "modgen_generate: no C++ standard set, defaulting to C++23.\n"
                    "Either set CMAKE_CXX_STANDARD globally, or pass the CXX_STANDARD parameter")
            set(MODULE_CXX_STANDARD 23)
        endif ()
    endif ()

    set(modgen_flags "${MODULE_CFLAGS}")

    if (NOT MODULE_NO_DEFAULT_CFLAGS)
        modgen_get_compiler_flags(CXX_STANDARD ${MODULE_CXX_STANDARD} INCLUDES ${MODULE_INCLUDE_DIRS})
        list(APPEND modgen_flags ${MODGEN_COMPILER_FLAGS})
    endif ()

    add_custom_command(
            OUTPUT "${MODULE_SOURCE_FILE}"
            WORKING_DIRECTORY "${MODULE_OUTPUT_DIR}"
            COMMAND "${MODGEN_CMD}"
            --regex "'${MODULE_FILTER}'"
            --exclude "'${MODULE_EXCLUDE}'"
            --name "${MODULE_NAME}"
            --output "${MODULE_SOURCE_FILE}"
            ./includes.cpp
            --
            ${modgen_flags}
            DEPENDS "${MODGEN_CMD}"
            COMMENT "Generating module ${MODULE_NAME}"
    )

    add_library("${MODULE_NAME}" STATIC)
    target_sources("${MODULE_NAME}" PUBLIC
            FILE_SET CXX_MODULES
            FILES "${MODULE_SOURCE_FILE}"
            BASE_DIRS "${MODULE_OUTPUT_DIR}"
    )
    target_link_libraries("${MODULE_NAME}" PRIVATE ${MODULE_LIBRARIES})
    target_compile_options("${MODULE_NAME}" PRIVATE ${MODULE_CFLAGS})
    target_include_directories("${MODULE_NAME}" PRIVATE ${MODULE_INCLUDE_DIRS})
    target_sources("${MODULE_NAME}" PRIVATE ${MODULE_SOURCES})
    target_compile_features("${MODULE_NAME}" PRIVATE cxx_std_${MODULE_CXX_STANDARD})
endfunction()


if (PROJECT_IS_TOP_LEVEL)
    add_subdirectory(demo)
endif ()
